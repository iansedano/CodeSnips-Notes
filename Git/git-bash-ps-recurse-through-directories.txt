ls | xargs -I{} git -C {} status

To do it in parallel:

ls | xargs -P10 -I{} git -C {} status

////

BASH
for i in */.git; do ( echo $i; cd $i/..; git status; ); done



///


Run the following from the parent directory, plugins in this case:

find . -type d -depth 1 -exec git --git-dir={}/.git --work-tree=$PWD/{} pull origin master \;

To clarify:
find . // searches the current directory
-type d // to find directories, not files
-depth 1 // for a maximum depth of one sub-directory
-exec {} \; // runs a custom command for every find
git --git-dir={}/.git --work-tree=$PWD/{} pull // git pulls the individual directories

To play around with find, I recommend using echo after -exec to preview, e.g.:

find . -type d -depth 1 -exec echo git --git-dir={}/.git --work-tree=$PWD/{} status \;


Note: if the -depth 1 option is not available, try -mindepth 1 -maxdepth 1.



////

POWERSHELL (works)

Get-ChildItem -Recurse -Directory -Hidden  -Filter .git | ForEach-Object { & git --git-dir="$($_.FullName)" --work-tree="$(Split-Path $_.FullName -Parent)" status }


This one outputs path with colors :)

Get-ChildItem -Recurse -Directory -Hidden  -Filter .git | ForEach-Object { Write-Host "`n`n ++++ $(Split-Path $_.FullName -Parent) ++++ `n" -ForegroundColor Green ; & git --git-dir="$($_.FullName)" --work-tree="$(Split-Path $_.FullName -Parent)" status}

as a powershell function

function git-recurse ($command)
{
	Get-ChildItem -Recurse -Directory -Hidden -Filter .git `
	| ForEach-Object `
	{ Write-Host "`n`n ++++ $(Split-Path $_.FullName -Parent) ++++ `n" -ForegroundColor Green ; `
	& git --git-dir="$($_.FullName)" `
	--work-tree="$(Split-Path $_.FullName -Parent)" `
	$command}
}